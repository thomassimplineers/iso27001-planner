import streamlit as st
import json
from datetime import datetime
import os
from dotenv import load_dotenv
import google.generativeai as genai

# Konfigurera sidan
st.set_page_config(
    page_title="ISO 27001 Certifieringsplanering",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom styling
st.markdown("""
    <style>
        .stCheckbox {
            font-size: 1.1rem;
        }
        .main {
            padding: 2rem;
        }
        h1 {
            color: #2c3e50;
        }
        .stAlert {
            padding: 1rem;
            margin: 1rem 0;
        }
    </style>
""", unsafe_allow_html=True)

# Huvudtitel
st.title("üìã ISO 27001 Certifieringsplanering")
st.markdown("---")

# Funktioner f√∂r datahantering
def save_data_to_file():
    """Spara data till JSON-fil"""
    try:
        with open('iso27001_data.json', 'w', encoding='utf-8') as f:
            json.dump(st.session_state.iso_data, f, ensure_ascii=False, indent=2)
        return True
    except Exception as e:
        st.error(f"Kunde inte spara data: {str(e)}")
        return False

def load_data_from_file():
    """Ladda data fr√•n JSON-fil"""
    try:
        if os.path.exists('iso27001_data.json'):
            with open('iso27001_data.json', 'r', encoding='utf-8') as f:
                return json.load(f)
    except Exception as e:
        st.error(f"Kunde inte ladda data: {str(e)}")
    return {
        'organisation_info': {},
        'checklists': {
            'ledningens_engagemang': {},
            'scope': {},
            'riskanalys': {},
            'policyer': {},
            'kontroller': {}
        }
    }

# Initiera session state f√∂r att spara data
if 'iso_data' not in st.session_state:
    st.session_state.iso_data = load_data_from_file()

# Konfigurera Gemini
try:
    GOOGLE_API_KEY = st.secrets["GOOGLE_API_KEY"]
except Exception:
    GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY')  # Fallback f√∂r lokal utveckling

if not GOOGLE_API_KEY:
    st.error("‚ùå Ingen API-nyckel hittad. Kontakta administrat√∂ren.")
    st.stop()

genai.configure(api_key=GOOGLE_API_KEY)
model = genai.GenerativeModel('gemini-pro')

def get_ai_analysis(data):
    """F√• AI-analys fr√•n Gemini"""
    try:
        # Skapa en strukturerad prompt f√∂r analys
        prompt = f"""
        Analysera f√∂ljande ISO 27001-implementeringsdata och ge konkreta rekommendationer:

        Organisationsinformation:
        - Namn: {data['organisation_info'].get('org_name', 'Ej angivet')}
        - Antal anst√§llda: {data['organisation_info'].get('org_size', 'Ej angivet')}
        
        Checklista status:
        Ledningens engagemang:
        {', '.join([k for k, v in data['checklists']['ledningens_engagemang'].items() if v])}
        
        Scope:
        {', '.join([k for k, v in data['checklists']['scope'].items() if v])}
        
        Riskanalys:
        {', '.join([k for k, v in data['checklists']['riskanalys'].items() if v])}
        
        Ge specifika rekommendationer f√∂r:
        1. N√§sta kritiska steg
        2. Potentiella risker att vara uppm√§rksam p√•
        3. F√∂rslag p√• f√∂rb√§ttringar
        4. Tidslinje f√∂r implementation
        
        Svara p√• svenska och var konkret i dina rekommendationer.
        """
        
        response = model.generate_content(prompt)
        return response.text
    except Exception as e:
        return f"Kunde inte generera AI-analys: {str(e)}"

# Sidopanel f√∂r navigation
with st.sidebar:
    st.header("Navigation")
    page = st.radio(
        "V√§lj sektion:",
        ["Implementeringsguide", "Organisationsinformation", "Checklista", "Handlingsplan", "Exportera Data"]
    )

# Implementeringsguide
if page == "Implementeringsguide":
    st.header("üó∫Ô∏è ISO 27001 Implementeringsguide")
    
    # Definiera implementeringsstegen
    implementation_steps = {
        "1. Samla ditt team": {
            "description": """
            - Identifiera nyckelpersoner fr√•n olika avdelningar (IT, HR, juridik, kvalitet)
            - Definiera roller och ansvar
            - Skapa en RACI-matris
            """,
            "estimated_time": "1 vecka",
            "deliverables": "Projekt RACI-matris, utkast till Statement of Applicability och Scope"
        },
        "2. Gap-analys": {
            "description": """
            - Utv√§rdera nuvarande s√§kerhetsstatus
            - Identifiera gap mot ISO 27001-standarden
            - Dokumentera resultat och rekommendationer
            """,
            "estimated_time": "2 veckor",
            "deliverables": "Gap-analysrapport med identifierade risker och brister"
        },
        "3. Prioritera √•tg√§rder": {
            "description": """
            - Analysera gap-analysens resultat
            - Prioritera √•tg√§rder baserat p√• risk och resurser
            - Skapa handlingsplan
            """,
            "estimated_time": "6 veckor",
            "deliverables": "Prioriterad √•tg√§rdsplan med tidslinjer"
        },
        "4. Tillg√•ngshantering": {
            "description": """
            - Identifiera informationstillg√•ngar
            - Klassificera tillg√•ngar efter k√§nslighet
            - Uppr√§tta tillg√•ngsregister
            """,
            "estimated_time": "2 veckor",
            "deliverables": "Uppdaterat tillg√•ngsregister"
        },
        "5. Riskhantering": {
            "description": """
            - Genomf√∂r riskbed√∂mning
            - Identifiera och v√§rdera hot
            - Utveckla riskreducerande √•tg√§rder
            """,
            "estimated_time": "2 veckor",
            "deliverables": "Riskbed√∂mning och √•tg√§rdsplan"
        },
        "6. ISMS-dokumentation": {
            "description": """
            - Utveckla policyer och procedurer
            - Skapa rutiner och arbetsinstruktioner
            - Dokumentera s√§kerhetskontroller
            """,
            "estimated_time": "6 veckor",
            "deliverables": "Komplett ISMS-dokumentation"
        },
        "7. Intern revision": {
            "description": """
            - Planera intern revision
            - Genomf√∂r revision av ISMS
            - Dokumentera resultat och avvikelser
            """,
            "estimated_time": "2 veckor",
            "deliverables": "Intern revisionsrapport"
        },
        "8. Ledningens genomg√•ng": {
            "description": """
            - Presentera resultat f√∂r ledningen
            - Utv√§rdera ISMS effektivitet
            - Besluta om f√∂rb√§ttrings√•tg√§rder
            """,
            "estimated_time": "2 veckor",
            "deliverables": "Protokoll fr√•n ledningens genomg√•ng"
        },
        "9. Extern revision och certifiering": {
            "description": """
            - V√§lj certifieringsorgan
            - Genomg√• steg 1-revision
            - Genomg√• steg 2-revision (platsbes√∂k)
            """,
            "estimated_time": "2 veckor",
            "deliverables": "ISO 27001-certifiering"
        }
    }
    
    # Ber√§kna total progress
    if 'step_progress' not in st.session_state.iso_data:
        st.session_state.iso_data['step_progress'] = {}
    
    total_steps = len(implementation_steps)
    completed_steps = sum(st.session_state.iso_data['step_progress'].values())
    
    # Visa total progress
    st.progress(completed_steps / total_steps)
    st.write(f"Total framsteg: {int((completed_steps / total_steps) * 100)}%")
    
    # Visa varje steg med detaljer
    for step, details in implementation_steps.items():
        with st.expander(f"{step} ({details['estimated_time']})"):
            # Visa beskrivning och leverabler
            st.markdown(details['description'])
            st.markdown(f"**Leverabler:** {details['deliverables']}")
            
            # Checkbox f√∂r att markera steget som klart
            step_key = step.split('.')[0]  # Anv√§nd endast numret som nyckel
            is_complete = st.checkbox(
                "Markera som klar",
                key=f"step_{step_key}",
                value=st.session_state.iso_data['step_progress'].get(step_key, False)
            )
            st.session_state.iso_data['step_progress'][step_key] = is_complete
            
            # Visa AI-rekommendationer f√∂r detta steg
            if st.button(f"ü§ñ F√• AI-rekommendationer f√∂r {step}", key=f"ai_{step_key}"):
                with st.spinner("Analyserar och genererar rekommendationer..."):
                    prompt = f"""
                    Ge konkreta rekommendationer f√∂r f√∂ljande steg i ISO 27001-implementationen:
                    
                    Steg: {step}
                    Beskrivning: {details['description']}
                    F√∂rv√§ntade leverabler: {details['deliverables']}
                    
                    Ge specifika, praktiska r√•d om:
                    1. Hur man b√§st genomf√∂r detta steg
                    2. Vanliga fallgropar att undvika
                    3. Viktiga framg√•ngsfaktorer
                    4. Konkreta exempel p√• best practices
                    
                    Svara p√• svenska och var mycket specifik.
                    """
                    response = model.generate_content(prompt)
                    st.markdown("### AI-rekommendationer")
                    st.markdown(response.text)
    
    # Spara-knapp f√∂r framsteg
    if st.button("üíæ Spara framsteg"):
        if save_data_to_file():
            st.success("Framsteg sparade!")

# Organisationsinformation
elif page == "Organisationsinformation":
    st.header("üè¢ Organisationsinformation")
    
    col1, col2 = st.columns(2)
    with col1:
        org_name = st.text_input("Organisationens namn", 
                                st.session_state.iso_data['organisation_info'].get('org_name', ''))
        org_size = st.number_input("Antal anst√§llda", 
                                 min_value=1, 
                                 value=st.session_state.iso_data['organisation_info'].get('org_size', 1))
    with col2:
        contact_person = st.text_input("Kontaktperson", 
                                     st.session_state.iso_data['organisation_info'].get('contact_person', ''))
        target_date = st.date_input("M√•ls√§ttning f√∂r certifiering", 
                                  value=datetime.strptime(st.session_state.iso_data['organisation_info'].get('target_date', datetime.today().strftime('%Y-%m-%d')), '%Y-%m-%d'))
    
    st.session_state.iso_data['organisation_info'].update({
        'org_name': org_name,
        'org_size': org_size,
        'contact_person': contact_person,
        'target_date': target_date.strftime('%Y-%m-%d')
    })
    
    # Spara-knapp
    if st.button("üíæ Spara √§ndringar"):
        if save_data_to_file():
            st.success("Data sparad!")

# Checklista
elif page == "Checklista":
    st.header("‚úÖ Checklista f√∂r ISO 27001")
    
    # Ledningens engagemang
    st.subheader("1. Ledningens engagemang")
    changed = False
    
    engagement_values = {
        'ledning_godkant': st.checkbox("Ledningen har godk√§nt ISO 27001-projektet", 
                                     st.session_state.iso_data['checklists']['ledningens_engagemang'].get('ledning_godkant', False)),
        'resurser_allokerade': st.checkbox("N√∂dv√§ndiga resurser har allokerats", 
                                         st.session_state.iso_data['checklists']['ledningens_engagemang'].get('resurser_allokerade', False)),
        'projektledare_utsedd': st.checkbox("Projektledare har utsetts", 
                                          st.session_state.iso_data['checklists']['ledningens_engagemang'].get('projektledare_utsedd', False))
    }
    
    if engagement_values != st.session_state.iso_data['checklists']['ledningens_engagemang']:
        changed = True
        st.session_state.iso_data['checklists']['ledningens_engagemang'] = engagement_values

    # Omfattning (Scope)
    st.subheader("2. Omfattning (Scope)")
    st.session_state.iso_data['checklists']['scope'].update({
        'scope_definierat': st.checkbox("Omfattningen av ISMS √§r definierad", 
                                      st.session_state.iso_data['checklists']['scope'].get('scope_definierat', False)),
        'granser_dokumenterade': st.checkbox("Organisatoriska gr√§nser √§r dokumenterade", 
                                           st.session_state.iso_data['checklists']['scope'].get('granser_dokumenterade', False)),
        'undantag_dokumenterade': st.checkbox("Eventuella undantag √§r dokumenterade och motiverade", 
                                            st.session_state.iso_data['checklists']['scope'].get('undantag_dokumenterade', False))
    })
    
    # Riskanalys
    st.subheader("3. Riskanalys")
    st.session_state.iso_data['checklists']['riskanalys'].update({
        'metodik_vald': st.checkbox("Riskanalysmetodik √§r vald", 
                                  st.session_state.iso_data['checklists']['riskanalys'].get('metodik_vald', False)),
        'tillgangar_identifierade': st.checkbox("Informationstillg√•ngar √§r identifierade", 
                                              st.session_state.iso_data['checklists']['riskanalys'].get('tillgangar_identifierade', False)),
        'risker_varderade': st.checkbox("Risker √§r v√§rderade", 
                                      st.session_state.iso_data['checklists']['riskanalys'].get('risker_varderade', False))
    })

    # Spara-knapp f√∂r checklistan
    if changed:
        if st.button("üíæ Spara √§ndringar"):
            if save_data_to_file():
                st.success("Checklista sparad!")

# Handlingsplan
elif page == "Handlingsplan":
    st.header("üìù Handlingsplan")
    
    # AI-analys av handlingsplan
    if st.button("ü§ñ F√• AI-analys av handlingsplan"):
        with st.spinner("Analyserar handlingsplan och genererar rekommendationer..."):
            activities = st.session_state.iso_data.get('activities', [])
            org_info = st.session_state.iso_data.get('organisation_info', {})
            checklists = st.session_state.iso_data.get('checklists', {})
            
            prompt = f"""
            Analysera f√∂ljande handlingsplan f√∂r ISO 27001-implementering och ge konkreta rekommendationer:

            Organisationsinformation:
            - Namn: {org_info.get('org_name', 'Ej angivet')}
            - Antal anst√§llda: {org_info.get('org_size', 'Ej angivet')}
            - M√•ls√§ttning f√∂r certifiering: {org_info.get('target_date', 'Ej angivet')}

            Nuvarande aktiviteter i handlingsplanen:
            {chr(10).join([f"- {a['activity']} (Prioritet: {a['priority']}, Status: {a['status']}, Deadline: {a['due_date']})" for a in activities])}

            Checklista status:
            Ledningens engagemang: {', '.join([k for k, v in checklists.get('ledningens_engagemang', {}).items() if v])}
            Scope: {', '.join([k for k, v in checklists.get('scope', {}).items() if v])}
            Riskanalys: {', '.join([k for k, v in checklists.get('riskanalys', {}).items() if v])}

            Baserat p√• denna information, ge rekommendationer om:
            1. Saknade kritiska aktiviteter som b√∂r l√§ggas till
            2. F√∂rslag p√• omprioritering av befintliga aktiviteter
            3. Tidslinjejusteringar baserat p√• best practices
            4. Specifika √•tg√§rder f√∂r att √∂ka effektiviteten
            5. Risker att vara uppm√§rksam p√•

            Svara p√• svenska och var mycket specifik i dina rekommendationer.
            Om det saknas aktiviteter, ge konkreta exempel p√• aktiviteter som b√∂r l√§ggas till.
            """
            
            response = model.generate_content(prompt)
            st.markdown("### ü§ñ AI-analys och rekommendationer")
            st.markdown(response.text)
            st.markdown("---")
    
    # L√§gg till ny aktivitet
    st.subheader("L√§gg till aktivitet")
    col1, col2 = st.columns(2)
    
    with col1:
        new_activity = st.text_input("Aktivitet")
        priority = st.selectbox("Prioritet", ["H√∂g", "Medium", "L√•g"])
    
    with col2:
        due_date = st.date_input("Deadline")
        responsible = st.text_input("Ansvarig")
    
    if st.button("L√§gg till aktivitet"):
        if 'activities' not in st.session_state.iso_data:
            st.session_state.iso_data['activities'] = []
        
        st.session_state.iso_data['activities'].append({
            'activity': new_activity,
            'priority': priority,
            'due_date': due_date.strftime('%Y-%m-%d'),
            'responsible': responsible,
            'status': 'Ej p√•b√∂rjad'
        })
    
    # Visa aktiviteter
    if 'activities' in st.session_state.iso_data and st.session_state.iso_data['activities']:
        st.subheader("Aktiviteter")
        for idx, activity in enumerate(st.session_state.iso_data['activities']):
            col1, col2, col3, col4 = st.columns([3, 1, 1, 1])
            with col1:
                st.write(f"**{activity['activity']}**")
            with col2:
                st.write(f"Prioritet: {activity['priority']}")
            with col3:
                st.write(f"Deadline: {activity['due_date']}")
            with col4:
                status = st.selectbox(
                    "Status",
                    ["Ej p√•b√∂rjad", "P√•g√•ende", "Klar"],
                    key=f"status_{idx}",
                    index=["Ej p√•b√∂rjad", "P√•g√•ende", "Klar"].index(activity['status'])
                )
                activity['status'] = status

    # Spara-knapp f√∂r handlingsplan
    if st.button("üíæ Spara handlingsplan"):
        if save_data_to_file():
            st.success("Handlingsplan sparad!")

# Exportera Data
elif page == "Exportera Data":
    st.header("üíæ Exportera Data")
    
    if st.button("Ladda ner ISO 27001-plan"):
        # Konvertera data till JSON
        json_data = json.dumps(st.session_state.iso_data, indent=2, ensure_ascii=False)
        
        # Skapa nedladdningsbar l√§nk
        st.download_button(
            label="Klicka h√§r f√∂r att ladda ner",
            data=json_data,
            file_name=f"iso27001_plan_{datetime.now().strftime('%Y%m%d')}.json",
            mime="application/json"
        )
        
        st.success("Din ISO 27001-plan √§r redo f√∂r nedladdning!")

# Footer
st.markdown("---")
st.markdown("*Detta √§r ett verktyg f√∂r att hj√§lpa till med planering av ISO 27001-certifiering. Det ers√§tter inte professionell r√•dgivning.*")
